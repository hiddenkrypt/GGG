<!DOCTYPE HTML>
<html>
	<head>
		<!--
			This test page replicates the normal loading screen page, but adds
			functionality. It uses the same ScreenEngine and SpecialEvents code
			as well as the same stylesheet. It adds the following:

			- A select menu that allows a user to choose to view a specific
			  loading screen
			- URL parameter parsing to allow a user to hotlink to a specific
			  loading screen, as well as a field that shows such urls when a
			  screen is selected. When this parameter is absent, a random screen
			  will be picked on page load.
			- A test loader, that will dynamically load a user defined url as a
			  loading screen without having to make any code changes
		-->
		<meta charset="UTF-8">
		<link rel="stylesheet" type="text/css" href="LoadingScreens.css">
		<script src="res/cards.js">//event callbacks for some screens</script>
		<script src="SpecialEvents.js"></script>
		<script src="Directory.js"></script>
		<script src="ScreenEngine.js"></script>
		<title>	GGG Gmod Server (SCREEN TEST MODE)	</title>
		<style>
			test{
				font-size:2em;
				font-family:Courier, monospace;
				color:#fff;
				text-shadow:
					-.1em -.1em 0 #000,
					 .1em -.1em 0 #000,
					-.1em  .1em 0 #000,
					 .1em  .1em 0 #000;
			}
		</style>
	</head>
	<body>
		<!-- Loading Screen Elements -->
		<img src="http://i.imgur.com/hMfgEFz.png" id="logo">
		<div id='boilerplate'>
			<div id='title'>
				Gentlemen's Gaming Group
			</div>
			<div id='dynamicstats'>
				<span id='mode'></span> <br> <span id='map'></span>
			</div>
		</div>

		<!-- User inputs for testing-->

		<div id="test" style="position:absolute; top:1em; right:1em;" >
			<!-- This option menu is populated with all registered loading
			screens. When a selection is made, the screen is loaded.-->
			<select id="selectBackground" onchange="Test.selectBackground()"></select><br>
			<!-- This textfield is populated with a URL that will load this page
			with the current screen. Population is done on page load and on
			selection of a screen-->
			<test>URL:</test><input id="urlGen"><br>
			<!-- This input allows a user to dynamically load an image to see
			how well it works as a loading screen -->
			<test>Quick Image test:</test><input id="imgSrc" value="stick image URL here!"></input><input type="button" value="load" onclick="Test.quickTest()" >
		</div>

		<!-- Testing code -->
		<script>
			var Test = new (function(){
				/* This code runs after the elements are set up. */

				/**
				 * The select menu is cached and populated
				**/
				var select = document.getElementById("selectBackground");
				loadingScreenDirectory.forEach( function(bg, i){
					var newOption = document.createElement("option");
					newOption.innerHTML = bg.credit + ":  " + bg.title;
					select.appendChild(newOption);
				});

				/**
				 * This function is called on change of the select menu. The
				 * selected screen is loaded, and a url for that screen is
				 * generated.
				**/
				this.selectBackground = function(){
					ScreenEngine.load(select.selectedIndex);
					document.getElementById("urlGen").value = window.location.href.split("?")[0] + "?screen=" + select.selectedIndex;
				}

				/**
				 * This function is run on click of the quick test button.
				 * We attempt to load the supplied URL as a screen image.
				**/
				this.quickTest = function(){
					ScreenEngine.setBackground("url('" + document.getElementById('imgSrc').value + "')");
				}

				/**
				 * one second after the code is parsed, the GameDetails
				 * hook of Garry's Mod is simulated.
				**/
				setTimeout(function(){
					GameDetails( '', '', "de_deathcookin", '', '', "terrortown" );
				},1000);

				/**
				 * window.onload is overwritten from the normal ScreenEngine Code with a custion test version.
				 * This checks the url for an argument to select a specific screen. If the argument is unavailable, a random screen is selected by default.
				**/
				window.onload = function(){
					ScreenEngine.load(window.location.search.split('=')[1] >> 0);
					select.selectedIndex = window.location.search.split('=')[1] >> 0;
					document.getElementById("urlGen").value = window.location.href
				}
			})();
		</script>
	</body>
</html>
